// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rasmgr_client_service.proto

#ifndef PROTOBUF_rasmgr_5fclient_5fservice_2eproto__INCLUDED
#define PROTOBUF_rasmgr_5fclient_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

//#if GOOGLE_PROTOBUF_VERSION < 3000000
//#error This file was generated by a newer version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please update
//#error your headers.
//#endif
//#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
//#error This file was generated by an older version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please
//#error regenerate this file with a newer version of protoc.

//#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_service.pb.h"
// @@protoc_insertion_point(includes)

namespace rasnet {
namespace service {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

class ClientIdentity;
class CloseDbReq;
class ConnectRepl;
class ConnectReq;
class DisconnectReq;
class KeepAliveReq;
class OpenDbRepl;
class OpenDbReq;

// ===================================================================

class ClientIdentity : public ::google::protobuf::Message {
 public:
  ClientIdentity();
  virtual ~ClientIdentity();

  ClientIdentity(const ClientIdentity& from);

  inline ClientIdentity& operator=(const ClientIdentity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientIdentity& default_instance();

  void Swap(ClientIdentity* other);

  // implements Message ----------------------------------------------

  inline ClientIdentity* New() const { return New(NULL); }

  ClientIdentity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientIdentity& from);
  void MergeFrom(const ClientIdentity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientIdentity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rasnet.service.ClientIdentity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ClientIdentity* default_instance_;
};
// -------------------------------------------------------------------

class ConnectReq : public ::google::protobuf::Message {
 public:
  ConnectReq();
  virtual ~ConnectReq();

  ConnectReq(const ConnectReq& from);

  inline ConnectReq& operator=(const ConnectReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectReq& default_instance();

  void Swap(ConnectReq* other);

  // implements Message ----------------------------------------------

  inline ConnectReq* New() const { return New(NULL); }

  ConnectReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectReq& from);
  void MergeFrom(const ConnectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string passwordHash = 2;
  void clear_passwordhash();
  static const int kPasswordHashFieldNumber = 2;
  const ::std::string& passwordhash() const;
  void set_passwordhash(const ::std::string& value);
  void set_passwordhash(const char* value);
  void set_passwordhash(const char* value, size_t size);
  ::std::string* mutable_passwordhash();
  ::std::string* release_passwordhash();
  void set_allocated_passwordhash(::std::string* passwordhash);

  // @@protoc_insertion_point(class_scope:rasnet.service.ConnectReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr passwordhash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ConnectReq* default_instance_;
};
// -------------------------------------------------------------------

class ConnectRepl : public ::google::protobuf::Message {
 public:
  ConnectRepl();
  virtual ~ConnectRepl();

  ConnectRepl(const ConnectRepl& from);

  inline ConnectRepl& operator=(const ConnectRepl& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRepl& default_instance();

  void Swap(ConnectRepl* other);

  // implements Message ----------------------------------------------

  inline ConnectRepl* New() const { return New(NULL); }

  ConnectRepl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectRepl& from);
  void MergeFrom(const ConnectRepl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectRepl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clientUUID = 1;
  void clear_clientuuid();
  static const int kClientUUIDFieldNumber = 1;
  const ::std::string& clientuuid() const;
  void set_clientuuid(const ::std::string& value);
  void set_clientuuid(const char* value);
  void set_clientuuid(const char* value, size_t size);
  ::std::string* mutable_clientuuid();
  ::std::string* release_clientuuid();
  void set_allocated_clientuuid(::std::string* clientuuid);

  // optional int32 keepAliveTimeout = 2;
  void clear_keepalivetimeout();
  static const int kKeepAliveTimeoutFieldNumber = 2;
  ::google::protobuf::int32 keepalivetimeout() const;
  void set_keepalivetimeout(::google::protobuf::int32 value);

  // optional int32 clientId = 3;
  void clear_clientid();
  static const int kClientIdFieldNumber = 3;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rasnet.service.ConnectRepl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr clientuuid_;
  ::google::protobuf::int32 keepalivetimeout_;
  ::google::protobuf::int32 clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ConnectRepl* default_instance_;
};
// -------------------------------------------------------------------

class DisconnectReq : public ::google::protobuf::Message {
 public:
  DisconnectReq();
  virtual ~DisconnectReq();

  DisconnectReq(const DisconnectReq& from);

  inline DisconnectReq& operator=(const DisconnectReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectReq& default_instance();

  void Swap(DisconnectReq* other);

  // implements Message ----------------------------------------------

  inline DisconnectReq* New() const { return New(NULL); }

  DisconnectReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisconnectReq& from);
  void MergeFrom(const DisconnectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisconnectReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clientUUID = 1;
  void clear_clientuuid();
  static const int kClientUUIDFieldNumber = 1;
  const ::std::string& clientuuid() const;
  void set_clientuuid(const ::std::string& value);
  void set_clientuuid(const char* value);
  void set_clientuuid(const char* value, size_t size);
  ::std::string* mutable_clientuuid();
  ::std::string* release_clientuuid();
  void set_allocated_clientuuid(::std::string* clientuuid);

  // optional int32 clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rasnet.service.DisconnectReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr clientuuid_;
  ::google::protobuf::int32 clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static DisconnectReq* default_instance_;
};
// -------------------------------------------------------------------

class OpenDbReq : public ::google::protobuf::Message {
 public:
  OpenDbReq();
  virtual ~OpenDbReq();

  OpenDbReq(const OpenDbReq& from);

  inline OpenDbReq& operator=(const OpenDbReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenDbReq& default_instance();

  void Swap(OpenDbReq* other);

  // implements Message ----------------------------------------------

  inline OpenDbReq* New() const { return New(NULL); }

  OpenDbReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenDbReq& from);
  void MergeFrom(const OpenDbReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenDbReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clientUUID = 1;
  void clear_clientuuid();
  static const int kClientUUIDFieldNumber = 1;
  const ::std::string& clientuuid() const;
  void set_clientuuid(const ::std::string& value);
  void set_clientuuid(const char* value);
  void set_clientuuid(const char* value, size_t size);
  ::std::string* mutable_clientuuid();
  ::std::string* release_clientuuid();
  void set_allocated_clientuuid(::std::string* clientuuid);

  // optional int32 clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // optional string databaseName = 3;
  void clear_databasename();
  static const int kDatabaseNameFieldNumber = 3;
  const ::std::string& databasename() const;
  void set_databasename(const ::std::string& value);
  void set_databasename(const char* value);
  void set_databasename(const char* value, size_t size);
  ::std::string* mutable_databasename();
  ::std::string* release_databasename();
  void set_allocated_databasename(::std::string* databasename);

  // @@protoc_insertion_point(class_scope:rasnet.service.OpenDbReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr clientuuid_;
  ::google::protobuf::internal::ArenaStringPtr databasename_;
  ::google::protobuf::int32 clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static OpenDbReq* default_instance_;
};
// -------------------------------------------------------------------

class OpenDbRepl : public ::google::protobuf::Message {
 public:
  OpenDbRepl();
  virtual ~OpenDbRepl();

  OpenDbRepl(const OpenDbRepl& from);

  inline OpenDbRepl& operator=(const OpenDbRepl& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenDbRepl& default_instance();

  void Swap(OpenDbRepl* other);

  // implements Message ----------------------------------------------

  inline OpenDbRepl* New() const { return New(NULL); }

  OpenDbRepl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenDbRepl& from);
  void MergeFrom(const OpenDbRepl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpenDbRepl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dbSessionId = 1;
  void clear_dbsessionid();
  static const int kDbSessionIdFieldNumber = 1;
  const ::std::string& dbsessionid() const;
  void set_dbsessionid(const ::std::string& value);
  void set_dbsessionid(const char* value);
  void set_dbsessionid(const char* value, size_t size);
  ::std::string* mutable_dbsessionid();
  ::std::string* release_dbsessionid();
  void set_allocated_dbsessionid(::std::string* dbsessionid);

  // optional string serverHostName = 2;
  void clear_serverhostname();
  static const int kServerHostNameFieldNumber = 2;
  const ::std::string& serverhostname() const;
  void set_serverhostname(const ::std::string& value);
  void set_serverhostname(const char* value);
  void set_serverhostname(const char* value, size_t size);
  ::std::string* mutable_serverhostname();
  ::std::string* release_serverhostname();
  void set_allocated_serverhostname(::std::string* serverhostname);

  // optional uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rasnet.service.OpenDbRepl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr dbsessionid_;
  ::google::protobuf::internal::ArenaStringPtr serverhostname_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static OpenDbRepl* default_instance_;
};
// -------------------------------------------------------------------

class CloseDbReq : public ::google::protobuf::Message {
 public:
  CloseDbReq();
  virtual ~CloseDbReq();

  CloseDbReq(const CloseDbReq& from);

  inline CloseDbReq& operator=(const CloseDbReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseDbReq& default_instance();

  void Swap(CloseDbReq* other);

  // implements Message ----------------------------------------------

  inline CloseDbReq* New() const { return New(NULL); }

  CloseDbReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseDbReq& from);
  void MergeFrom(const CloseDbReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloseDbReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clientUUID = 1;
  void clear_clientuuid();
  static const int kClientUUIDFieldNumber = 1;
  const ::std::string& clientuuid() const;
  void set_clientuuid(const ::std::string& value);
  void set_clientuuid(const char* value);
  void set_clientuuid(const char* value, size_t size);
  ::std::string* mutable_clientuuid();
  ::std::string* release_clientuuid();
  void set_allocated_clientuuid(::std::string* clientuuid);

  // optional int32 clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // optional string dbSessionId = 3;
  void clear_dbsessionid();
  static const int kDbSessionIdFieldNumber = 3;
  const ::std::string& dbsessionid() const;
  void set_dbsessionid(const ::std::string& value);
  void set_dbsessionid(const char* value);
  void set_dbsessionid(const char* value, size_t size);
  ::std::string* mutable_dbsessionid();
  ::std::string* release_dbsessionid();
  void set_allocated_dbsessionid(::std::string* dbsessionid);

  // @@protoc_insertion_point(class_scope:rasnet.service.CloseDbReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr clientuuid_;
  ::google::protobuf::internal::ArenaStringPtr dbsessionid_;
  ::google::protobuf::int32 clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CloseDbReq* default_instance_;
};
// -------------------------------------------------------------------

class KeepAliveReq : public ::google::protobuf::Message {
 public:
  KeepAliveReq();
  virtual ~KeepAliveReq();

  KeepAliveReq(const KeepAliveReq& from);

  inline KeepAliveReq& operator=(const KeepAliveReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveReq& default_instance();

  void Swap(KeepAliveReq* other);

  // implements Message ----------------------------------------------

  inline KeepAliveReq* New() const { return New(NULL); }

  KeepAliveReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeepAliveReq& from);
  void MergeFrom(const KeepAliveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeepAliveReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clientUUID = 1;
  void clear_clientuuid();
  static const int kClientUUIDFieldNumber = 1;
  const ::std::string& clientuuid() const;
  void set_clientuuid(const ::std::string& value);
  void set_clientuuid(const char* value);
  void set_clientuuid(const char* value, size_t size);
  ::std::string* mutable_clientuuid();
  ::std::string* release_clientuuid();
  void set_allocated_clientuuid(::std::string* clientuuid);

  // optional int32 clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  ::google::protobuf::int32 clientid() const;
  void set_clientid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rasnet.service.KeepAliveReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr clientuuid_;
  ::google::protobuf::int32 clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto();

  void InitAsDefaultInstance();
  static KeepAliveReq* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientIdentity

// optional bytes uuid = 1;
inline void ClientIdentity::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientIdentity::uuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ClientIdentity.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientIdentity::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ClientIdentity.uuid)
}
inline void ClientIdentity::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ClientIdentity.uuid)
}
inline void ClientIdentity::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ClientIdentity.uuid)
}
inline ::std::string* ClientIdentity::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ClientIdentity.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientIdentity::release_uuid() {
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientIdentity::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ClientIdentity.uuid)
}

// optional int32 id = 2;
inline void ClientIdentity::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ClientIdentity::id() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ClientIdentity.id)
  return id_;
}
inline void ClientIdentity::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.ClientIdentity.id)
}

// -------------------------------------------------------------------

// ConnectReq

// optional string userName = 1;
inline void ConnectReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectReq::username() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectReq.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectReq::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectReq.userName)
}
inline void ConnectReq::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ConnectReq.userName)
}
inline void ConnectReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ConnectReq.userName)
}
inline ::std::string* ConnectReq::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ConnectReq.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectReq::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ConnectReq.userName)
}

// optional string passwordHash = 2;
inline void ConnectReq::clear_passwordhash() {
  passwordhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectReq::passwordhash() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectReq.passwordHash)
  return passwordhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectReq::set_passwordhash(const ::std::string& value) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectReq.passwordHash)
}
inline void ConnectReq::set_passwordhash(const char* value) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ConnectReq.passwordHash)
}
inline void ConnectReq::set_passwordhash(const char* value, size_t size) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ConnectReq.passwordHash)
}
inline ::std::string* ConnectReq::mutable_passwordhash() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ConnectReq.passwordHash)
  return passwordhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectReq::release_passwordhash() {
  
  return passwordhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectReq::set_allocated_passwordhash(::std::string* passwordhash) {
  if (passwordhash != NULL) {
    
  } else {
    
  }
  passwordhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwordhash);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ConnectReq.passwordHash)
}

// -------------------------------------------------------------------

// ConnectRepl

// optional string clientUUID = 1;
inline void ConnectRepl::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRepl::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectRepl.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRepl::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectRepl.clientUUID)
}
inline void ConnectRepl::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ConnectRepl.clientUUID)
}
inline void ConnectRepl::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ConnectRepl.clientUUID)
}
inline ::std::string* ConnectRepl::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ConnectRepl.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRepl::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRepl::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ConnectRepl.clientUUID)
}

// optional int32 keepAliveTimeout = 2;
inline void ConnectRepl::clear_keepalivetimeout() {
  keepalivetimeout_ = 0;
}
inline ::google::protobuf::int32 ConnectRepl::keepalivetimeout() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectRepl.keepAliveTimeout)
  return keepalivetimeout_;
}
inline void ConnectRepl::set_keepalivetimeout(::google::protobuf::int32 value) {
  
  keepalivetimeout_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectRepl.keepAliveTimeout)
}

// optional int32 clientId = 3;
inline void ConnectRepl::clear_clientid() {
  clientid_ = 0;
}
inline ::google::protobuf::int32 ConnectRepl::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectRepl.clientId)
  return clientid_;
}
inline void ConnectRepl::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectRepl.clientId)
}

// -------------------------------------------------------------------

// DisconnectReq

// optional string clientUUID = 1;
inline void DisconnectReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisconnectReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.DisconnectReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisconnectReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.DisconnectReq.clientUUID)
}
inline void DisconnectReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.DisconnectReq.clientUUID)
}
inline void DisconnectReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.DisconnectReq.clientUUID)
}
inline ::std::string* DisconnectReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.DisconnectReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisconnectReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisconnectReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.DisconnectReq.clientUUID)
}

// optional int32 clientId = 2;
inline void DisconnectReq::clear_clientid() {
  clientid_ = 0;
}
inline ::google::protobuf::int32 DisconnectReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.DisconnectReq.clientId)
  return clientid_;
}
inline void DisconnectReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.DisconnectReq.clientId)
}

// -------------------------------------------------------------------

// OpenDbReq

// optional string clientUUID = 1;
inline void OpenDbReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenDbReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbReq.clientUUID)
}
inline void OpenDbReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbReq.clientUUID)
}
inline void OpenDbReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbReq.clientUUID)
}
inline ::std::string* OpenDbReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenDbReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbReq.clientUUID)
}

// optional int32 clientId = 2;
inline void OpenDbReq::clear_clientid() {
  clientid_ = 0;
}
inline ::google::protobuf::int32 OpenDbReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbReq.clientId)
  return clientid_;
}
inline void OpenDbReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbReq.clientId)
}

// optional string databaseName = 3;
inline void OpenDbReq::clear_databasename() {
  databasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenDbReq::databasename() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbReq.databaseName)
  return databasename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbReq::set_databasename(const ::std::string& value) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbReq.databaseName)
}
inline void OpenDbReq::set_databasename(const char* value) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbReq.databaseName)
}
inline void OpenDbReq::set_databasename(const char* value, size_t size) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbReq.databaseName)
}
inline ::std::string* OpenDbReq::mutable_databasename() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbReq.databaseName)
  return databasename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenDbReq::release_databasename() {
  
  return databasename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbReq::set_allocated_databasename(::std::string* databasename) {
  if (databasename != NULL) {
    
  } else {
    
  }
  databasename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), databasename);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbReq.databaseName)
}

// -------------------------------------------------------------------

// OpenDbRepl

// optional string dbSessionId = 1;
inline void OpenDbRepl::clear_dbsessionid() {
  dbsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenDbRepl::dbsessionid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbRepl.dbSessionId)
  return dbsessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbRepl::set_dbsessionid(const ::std::string& value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbRepl.dbSessionId)
}
inline void OpenDbRepl::set_dbsessionid(const char* value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbRepl.dbSessionId)
}
inline void OpenDbRepl::set_dbsessionid(const char* value, size_t size) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbRepl.dbSessionId)
}
inline ::std::string* OpenDbRepl::mutable_dbsessionid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbRepl.dbSessionId)
  return dbsessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenDbRepl::release_dbsessionid() {
  
  return dbsessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbRepl::set_allocated_dbsessionid(::std::string* dbsessionid) {
  if (dbsessionid != NULL) {
    
  } else {
    
  }
  dbsessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbsessionid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbRepl.dbSessionId)
}

// optional string serverHostName = 2;
inline void OpenDbRepl::clear_serverhostname() {
  serverhostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenDbRepl::serverhostname() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbRepl.serverHostName)
  return serverhostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbRepl::set_serverhostname(const ::std::string& value) {
  
  serverhostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbRepl.serverHostName)
}
inline void OpenDbRepl::set_serverhostname(const char* value) {
  
  serverhostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbRepl.serverHostName)
}
inline void OpenDbRepl::set_serverhostname(const char* value, size_t size) {
  
  serverhostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbRepl.serverHostName)
}
inline ::std::string* OpenDbRepl::mutable_serverhostname() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbRepl.serverHostName)
  return serverhostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenDbRepl::release_serverhostname() {
  
  return serverhostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenDbRepl::set_allocated_serverhostname(::std::string* serverhostname) {
  if (serverhostname != NULL) {
    
  } else {
    
  }
  serverhostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverhostname);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbRepl.serverHostName)
}

// optional uint32 port = 3;
inline void OpenDbRepl::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 OpenDbRepl::port() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbRepl.port)
  return port_;
}
inline void OpenDbRepl::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbRepl.port)
}

// -------------------------------------------------------------------

// CloseDbReq

// optional string clientUUID = 1;
inline void CloseDbReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloseDbReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.CloseDbReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseDbReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.CloseDbReq.clientUUID)
}
inline void CloseDbReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.CloseDbReq.clientUUID)
}
inline void CloseDbReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.CloseDbReq.clientUUID)
}
inline ::std::string* CloseDbReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.CloseDbReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloseDbReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseDbReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.CloseDbReq.clientUUID)
}

// optional int32 clientId = 2;
inline void CloseDbReq::clear_clientid() {
  clientid_ = 0;
}
inline ::google::protobuf::int32 CloseDbReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.CloseDbReq.clientId)
  return clientid_;
}
inline void CloseDbReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.CloseDbReq.clientId)
}

// optional string dbSessionId = 3;
inline void CloseDbReq::clear_dbsessionid() {
  dbsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloseDbReq::dbsessionid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.CloseDbReq.dbSessionId)
  return dbsessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseDbReq::set_dbsessionid(const ::std::string& value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.CloseDbReq.dbSessionId)
}
inline void CloseDbReq::set_dbsessionid(const char* value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.CloseDbReq.dbSessionId)
}
inline void CloseDbReq::set_dbsessionid(const char* value, size_t size) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.CloseDbReq.dbSessionId)
}
inline ::std::string* CloseDbReq::mutable_dbsessionid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.CloseDbReq.dbSessionId)
  return dbsessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloseDbReq::release_dbsessionid() {
  
  return dbsessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseDbReq::set_allocated_dbsessionid(::std::string* dbsessionid) {
  if (dbsessionid != NULL) {
    
  } else {
    
  }
  dbsessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbsessionid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.CloseDbReq.dbSessionId)
}

// -------------------------------------------------------------------

// KeepAliveReq

// optional string clientUUID = 1;
inline void KeepAliveReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeepAliveReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.KeepAliveReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.KeepAliveReq.clientUUID)
}
inline void KeepAliveReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.KeepAliveReq.clientUUID)
}
inline void KeepAliveReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.KeepAliveReq.clientUUID)
}
inline ::std::string* KeepAliveReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.KeepAliveReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeepAliveReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeepAliveReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.KeepAliveReq.clientUUID)
}

// optional int32 clientId = 2;
inline void KeepAliveReq::clear_clientid() {
  clientid_ = 0;
}
inline ::google::protobuf::int32 KeepAliveReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.KeepAliveReq.clientId)
  return clientid_;
}
inline void KeepAliveReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.KeepAliveReq.clientId)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace rasnet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rasmgr_5fclient_5fservice_2eproto__INCLUDED
