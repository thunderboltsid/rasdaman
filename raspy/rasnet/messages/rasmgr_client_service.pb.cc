// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rasmgr_client_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rasmgr_client_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rasnet {
namespace service {

namespace {

const ::google::protobuf::Descriptor* ClientIdentity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientIdentity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRepl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRepl_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenDbReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenDbReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenDbRepl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenDbRepl_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseDbReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseDbReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepAliveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepAliveReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto() {
  protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rasmgr_client_service.proto");
  GOOGLE_CHECK(file != NULL);
  ClientIdentity_descriptor_ = file->message_type(0);
  static const int ClientIdentity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIdentity, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIdentity, id_),
  };
  ClientIdentity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientIdentity_descriptor_,
      ClientIdentity::default_instance_,
      ClientIdentity_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientIdentity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIdentity, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIdentity, _is_default_instance_));
  ConnectReq_descriptor_ = file->message_type(1);
  static const int ConnectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectReq, passwordhash_),
  };
  ConnectReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectReq_descriptor_,
      ConnectReq::default_instance_,
      ConnectReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectReq, _is_default_instance_));
  ConnectRepl_descriptor_ = file->message_type(2);
  static const int ConnectRepl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRepl, clientuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRepl, keepalivetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRepl, clientid_),
  };
  ConnectRepl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectRepl_descriptor_,
      ConnectRepl::default_instance_,
      ConnectRepl_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectRepl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRepl, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRepl, _is_default_instance_));
  DisconnectReq_descriptor_ = file->message_type(3);
  static const int DisconnectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectReq, clientuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectReq, clientid_),
  };
  DisconnectReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DisconnectReq_descriptor_,
      DisconnectReq::default_instance_,
      DisconnectReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(DisconnectReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectReq, _is_default_instance_));
  OpenDbReq_descriptor_ = file->message_type(4);
  static const int OpenDbReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbReq, clientuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbReq, databasename_),
  };
  OpenDbReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenDbReq_descriptor_,
      OpenDbReq::default_instance_,
      OpenDbReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenDbReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbReq, _is_default_instance_));
  OpenDbRepl_descriptor_ = file->message_type(5);
  static const int OpenDbRepl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbRepl, dbsessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbRepl, serverhostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbRepl, port_),
  };
  OpenDbRepl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenDbRepl_descriptor_,
      OpenDbRepl::default_instance_,
      OpenDbRepl_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenDbRepl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbRepl, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDbRepl, _is_default_instance_));
  CloseDbReq_descriptor_ = file->message_type(6);
  static const int CloseDbReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDbReq, clientuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDbReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDbReq, dbsessionid_),
  };
  CloseDbReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseDbReq_descriptor_,
      CloseDbReq::default_instance_,
      CloseDbReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloseDbReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDbReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDbReq, _is_default_instance_));
  KeepAliveReq_descriptor_ = file->message_type(7);
  static const int KeepAliveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveReq, clientuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveReq, clientid_),
  };
  KeepAliveReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeepAliveReq_descriptor_,
      KeepAliveReq::default_instance_,
      KeepAliveReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeepAliveReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAliveReq, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rasmgr_5fclient_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientIdentity_descriptor_, &ClientIdentity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectReq_descriptor_, &ConnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectRepl_descriptor_, &ConnectRepl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DisconnectReq_descriptor_, &DisconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenDbReq_descriptor_, &OpenDbReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenDbRepl_descriptor_, &OpenDbRepl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseDbReq_descriptor_, &CloseDbReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeepAliveReq_descriptor_, &KeepAliveReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto() {
  delete ClientIdentity::default_instance_;
  delete ClientIdentity_reflection_;
  delete ConnectReq::default_instance_;
  delete ConnectReq_reflection_;
  delete ConnectRepl::default_instance_;
  delete ConnectRepl_reflection_;
  delete DisconnectReq::default_instance_;
  delete DisconnectReq_reflection_;
  delete OpenDbReq::default_instance_;
  delete OpenDbReq_reflection_;
  delete OpenDbRepl::default_instance_;
  delete OpenDbRepl_reflection_;
  delete CloseDbReq::default_instance_;
  delete CloseDbReq_reflection_;
  delete KeepAliveReq::default_instance_;
  delete KeepAliveReq_reflection_;
}

void protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rasnet::service::protobuf_AddDesc_common_5fservice_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033rasmgr_client_service.proto\022\016rasnet.se"
    "rvice\032\024common_service.proto\"*\n\016ClientIde"
    "ntity\022\014\n\004uuid\030\001 \001(\014\022\n\n\002id\030\002 \001(\005\"4\n\nConne"
    "ctReq\022\020\n\010userName\030\001 \001(\t\022\024\n\014passwordHash\030"
    "\002 \001(\t\"M\n\013ConnectRepl\022\022\n\nclientUUID\030\001 \001(\t"
    "\022\030\n\020keepAliveTimeout\030\002 \001(\005\022\020\n\010clientId\030\003"
    " \001(\005\"5\n\rDisconnectReq\022\022\n\nclientUUID\030\001 \001("
    "\t\022\020\n\010clientId\030\002 \001(\005\"G\n\tOpenDbReq\022\022\n\nclie"
    "ntUUID\030\001 \001(\t\022\020\n\010clientId\030\002 \001(\005\022\024\n\014databa"
    "seName\030\003 \001(\t\"G\n\nOpenDbRepl\022\023\n\013dbSessionI"
    "d\030\001 \001(\t\022\026\n\016serverHostName\030\002 \001(\t\022\014\n\004port\030"
    "\003 \001(\r\"G\n\nCloseDbReq\022\022\n\nclientUUID\030\001 \001(\t\022"
    "\020\n\010clientId\030\002 \001(\005\022\023\n\013dbSessionId\030\003 \001(\t\"4"
    "\n\014KeepAliveReq\022\022\n\nclientUUID\030\001 \001(\t\022\020\n\010cl"
    "ientId\030\002 \001(\0052\333\002\n\023RasMgrClientService\022B\n\007"
    "Connect\022\032.rasnet.service.ConnectReq\032\033.ra"
    "snet.service.ConnectRepl\022A\n\nDisconnect\022\035"
    ".rasnet.service.DisconnectReq\032\024.rasnet.s"
    "ervice.Void\022\?\n\006OpenDb\022\031.rasnet.service.O"
    "penDbReq\032\032.rasnet.service.OpenDbRepl\022;\n\007"
    "CloseDb\022\032.rasnet.service.CloseDbReq\032\024.ra"
    "snet.service.Void\022\?\n\tKeepAlive\022\034.rasnet."
    "service.KeepAliveReq\032\024.rasnet.service.Vo"
    "idB#\n\033org.rasdaman.rasnet.service\200\001\000\210\001\000b"
    "\006proto3", 967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rasmgr_client_service.proto", &protobuf_RegisterTypes);
  ClientIdentity::default_instance_ = new ClientIdentity();
  ConnectReq::default_instance_ = new ConnectReq();
  ConnectRepl::default_instance_ = new ConnectRepl();
  DisconnectReq::default_instance_ = new DisconnectReq();
  OpenDbReq::default_instance_ = new OpenDbReq();
  OpenDbRepl::default_instance_ = new OpenDbRepl();
  CloseDbReq::default_instance_ = new CloseDbReq();
  KeepAliveReq::default_instance_ = new KeepAliveReq();
  ClientIdentity::default_instance_->InitAsDefaultInstance();
  ConnectReq::default_instance_->InitAsDefaultInstance();
  ConnectRepl::default_instance_->InitAsDefaultInstance();
  DisconnectReq::default_instance_->InitAsDefaultInstance();
  OpenDbReq::default_instance_->InitAsDefaultInstance();
  OpenDbRepl::default_instance_->InitAsDefaultInstance();
  CloseDbReq::default_instance_->InitAsDefaultInstance();
  KeepAliveReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rasmgr_5fclient_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rasmgr_5fclient_5fservice_2eproto {
  StaticDescriptorInitializer_rasmgr_5fclient_5fservice_2eproto() {
    protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  }
} static_descriptor_initializer_rasmgr_5fclient_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientIdentity::kUuidFieldNumber;
const int ClientIdentity::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientIdentity::ClientIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.ClientIdentity)
}

void ClientIdentity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClientIdentity::ClientIdentity(const ClientIdentity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.ClientIdentity)
}

void ClientIdentity::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ClientIdentity::~ClientIdentity() {
  // @@protoc_insertion_point(destructor:rasnet.service.ClientIdentity)
  SharedDtor();
}

void ClientIdentity::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ClientIdentity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientIdentity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientIdentity_descriptor_;
}

const ClientIdentity& ClientIdentity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

ClientIdentity* ClientIdentity::default_instance_ = NULL;

ClientIdentity* ClientIdentity::New(::google::protobuf::Arena* arena) const {
  ClientIdentity* n = new ClientIdentity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientIdentity::Clear() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

bool ClientIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.ClientIdentity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.ClientIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.ClientIdentity)
  return false;
#undef DO_
}

void ClientIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.ClientIdentity)
  // optional bytes uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uuid(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.ClientIdentity)
}

::google::protobuf::uint8* ClientIdentity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.ClientIdentity)
  // optional bytes uuid = 1;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.ClientIdentity)
  return target;
}

int ClientIdentity::ByteSize() const {
  int total_size = 0;

  // optional bytes uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientIdentity::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientIdentity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientIdentity>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientIdentity::MergeFrom(const ClientIdentity& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ClientIdentity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientIdentity::CopyFrom(const ClientIdentity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIdentity::IsInitialized() const {

  return true;
}

void ClientIdentity::Swap(ClientIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientIdentity::InternalSwap(ClientIdentity* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientIdentity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientIdentity_descriptor_;
  metadata.reflection = ClientIdentity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientIdentity

// optional bytes uuid = 1;
void ClientIdentity::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ClientIdentity::uuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ClientIdentity.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientIdentity::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ClientIdentity.uuid)
}
 void ClientIdentity::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ClientIdentity.uuid)
}
 void ClientIdentity::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ClientIdentity.uuid)
}
 ::std::string* ClientIdentity::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ClientIdentity.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientIdentity::release_uuid() {
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientIdentity::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ClientIdentity.uuid)
}

// optional int32 id = 2;
void ClientIdentity::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 ClientIdentity::id() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ClientIdentity.id)
  return id_;
}
 void ClientIdentity::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.ClientIdentity.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectReq::kUserNameFieldNumber;
const int ConnectReq::kPasswordHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectReq::ConnectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.ConnectReq)
}

void ConnectReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnectReq::ConnectReq(const ConnectReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.ConnectReq)
}

void ConnectReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwordhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConnectReq::~ConnectReq() {
  // @@protoc_insertion_point(destructor:rasnet.service.ConnectReq)
  SharedDtor();
}

void ConnectReq::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwordhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectReq_descriptor_;
}

const ConnectReq& ConnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

ConnectReq* ConnectReq::default_instance_ = NULL;

ConnectReq* ConnectReq::New(::google::protobuf::Arena* arena) const {
  ConnectReq* n = new ConnectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectReq::Clear() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwordhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.ConnectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.ConnectReq.userName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passwordHash;
        break;
      }

      // optional string passwordHash = 2;
      case 2: {
        if (tag == 18) {
         parse_passwordHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwordhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwordhash().data(), this->passwordhash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.ConnectReq.passwordHash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.ConnectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.ConnectReq)
  return false;
#undef DO_
}

void ConnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.ConnectReq)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.ConnectReq.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string passwordHash = 2;
  if (this->passwordhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwordhash().data(), this->passwordhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.ConnectReq.passwordHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwordhash(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.ConnectReq)
}

::google::protobuf::uint8* ConnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.ConnectReq)
  // optional string userName = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.ConnectReq.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string passwordHash = 2;
  if (this->passwordhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwordhash().data(), this->passwordhash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.ConnectReq.passwordHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwordhash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.ConnectReq)
  return target;
}

int ConnectReq::ByteSize() const {
  int total_size = 0;

  // optional string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string passwordHash = 2;
  if (this->passwordhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwordhash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectReq::MergeFrom(const ConnectReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.passwordhash().size() > 0) {

    passwordhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwordhash_);
  }
}

void ConnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectReq::CopyFrom(const ConnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectReq::IsInitialized() const {

  return true;
}

void ConnectReq::Swap(ConnectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectReq::InternalSwap(ConnectReq* other) {
  username_.Swap(&other->username_);
  passwordhash_.Swap(&other->passwordhash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectReq_descriptor_;
  metadata.reflection = ConnectReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectReq

// optional string userName = 1;
void ConnectReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnectReq::username() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectReq.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectReq::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectReq.userName)
}
 void ConnectReq::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ConnectReq.userName)
}
 void ConnectReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ConnectReq.userName)
}
 ::std::string* ConnectReq::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ConnectReq.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectReq::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ConnectReq.userName)
}

// optional string passwordHash = 2;
void ConnectReq::clear_passwordhash() {
  passwordhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnectReq::passwordhash() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectReq.passwordHash)
  return passwordhash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectReq::set_passwordhash(const ::std::string& value) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectReq.passwordHash)
}
 void ConnectReq::set_passwordhash(const char* value) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ConnectReq.passwordHash)
}
 void ConnectReq::set_passwordhash(const char* value, size_t size) {
  
  passwordhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ConnectReq.passwordHash)
}
 ::std::string* ConnectReq::mutable_passwordhash() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ConnectReq.passwordHash)
  return passwordhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectReq::release_passwordhash() {
  
  return passwordhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectReq::set_allocated_passwordhash(::std::string* passwordhash) {
  if (passwordhash != NULL) {
    
  } else {
    
  }
  passwordhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwordhash);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ConnectReq.passwordHash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRepl::kClientUUIDFieldNumber;
const int ConnectRepl::kKeepAliveTimeoutFieldNumber;
const int ConnectRepl::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRepl::ConnectRepl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.ConnectRepl)
}

void ConnectRepl::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnectRepl::ConnectRepl(const ConnectRepl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.ConnectRepl)
}

void ConnectRepl::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keepalivetimeout_ = 0;
  clientid_ = 0;
}

ConnectRepl::~ConnectRepl() {
  // @@protoc_insertion_point(destructor:rasnet.service.ConnectRepl)
  SharedDtor();
}

void ConnectRepl::SharedDtor() {
  clientuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectRepl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRepl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRepl_descriptor_;
}

const ConnectRepl& ConnectRepl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

ConnectRepl* ConnectRepl::default_instance_ = NULL;

ConnectRepl* ConnectRepl::New(::google::protobuf::Arena* arena) const {
  ConnectRepl* n = new ConnectRepl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectRepl::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConnectRepl*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(keepalivetimeout_, clientid_);
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ConnectRepl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.ConnectRepl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientUUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientuuid().data(), this->clientuuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.ConnectRepl.clientUUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keepAliveTimeout;
        break;
      }

      // optional int32 keepAliveTimeout = 2;
      case 2: {
        if (tag == 16) {
         parse_keepAliveTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keepalivetimeout_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clientId;
        break;
      }

      // optional int32 clientId = 3;
      case 3: {
        if (tag == 24) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.ConnectRepl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.ConnectRepl)
  return false;
#undef DO_
}

void ConnectRepl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.ConnectRepl)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.ConnectRepl.clientUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientuuid(), output);
  }

  // optional int32 keepAliveTimeout = 2;
  if (this->keepalivetimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->keepalivetimeout(), output);
  }

  // optional int32 clientId = 3;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clientid(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.ConnectRepl)
}

::google::protobuf::uint8* ConnectRepl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.ConnectRepl)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.ConnectRepl.clientUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientuuid(), target);
  }

  // optional int32 keepAliveTimeout = 2;
  if (this->keepalivetimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->keepalivetimeout(), target);
  }

  // optional int32 clientId = 3;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clientid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.ConnectRepl)
  return target;
}

int ConnectRepl::ByteSize() const {
  int total_size = 0;

  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientuuid());
  }

  // optional int32 keepAliveTimeout = 2;
  if (this->keepalivetimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->keepalivetimeout());
  }

  // optional int32 clientId = 3;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRepl::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectRepl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRepl>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRepl::MergeFrom(const ConnectRepl& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.clientuuid().size() > 0) {

    clientuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuuid_);
  }
  if (from.keepalivetimeout() != 0) {
    set_keepalivetimeout(from.keepalivetimeout());
  }
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
}

void ConnectRepl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRepl::CopyFrom(const ConnectRepl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRepl::IsInitialized() const {

  return true;
}

void ConnectRepl::Swap(ConnectRepl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRepl::InternalSwap(ConnectRepl* other) {
  clientuuid_.Swap(&other->clientuuid_);
  std::swap(keepalivetimeout_, other->keepalivetimeout_);
  std::swap(clientid_, other->clientid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectRepl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRepl_descriptor_;
  metadata.reflection = ConnectRepl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectRepl

// optional string clientUUID = 1;
void ConnectRepl::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnectRepl::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectRepl.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRepl::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectRepl.clientUUID)
}
 void ConnectRepl::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.ConnectRepl.clientUUID)
}
 void ConnectRepl::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.ConnectRepl.clientUUID)
}
 ::std::string* ConnectRepl::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.ConnectRepl.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectRepl::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectRepl::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.ConnectRepl.clientUUID)
}

// optional int32 keepAliveTimeout = 2;
void ConnectRepl::clear_keepalivetimeout() {
  keepalivetimeout_ = 0;
}
 ::google::protobuf::int32 ConnectRepl::keepalivetimeout() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectRepl.keepAliveTimeout)
  return keepalivetimeout_;
}
 void ConnectRepl::set_keepalivetimeout(::google::protobuf::int32 value) {
  
  keepalivetimeout_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectRepl.keepAliveTimeout)
}

// optional int32 clientId = 3;
void ConnectRepl::clear_clientid() {
  clientid_ = 0;
}
 ::google::protobuf::int32 ConnectRepl::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.ConnectRepl.clientId)
  return clientid_;
}
 void ConnectRepl::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.ConnectRepl.clientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisconnectReq::kClientUUIDFieldNumber;
const int DisconnectReq::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisconnectReq::DisconnectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.DisconnectReq)
}

void DisconnectReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DisconnectReq::DisconnectReq(const DisconnectReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.DisconnectReq)
}

void DisconnectReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
}

DisconnectReq::~DisconnectReq() {
  // @@protoc_insertion_point(destructor:rasnet.service.DisconnectReq)
  SharedDtor();
}

void DisconnectReq::SharedDtor() {
  clientuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DisconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisconnectReq_descriptor_;
}

const DisconnectReq& DisconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

DisconnectReq* DisconnectReq::default_instance_ = NULL;

DisconnectReq* DisconnectReq::New(::google::protobuf::Arena* arena) const {
  DisconnectReq* n = new DisconnectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisconnectReq::Clear() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
}

bool DisconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.DisconnectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientUUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientuuid().data(), this->clientuuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.DisconnectReq.clientUUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientId;
        break;
      }

      // optional int32 clientId = 2;
      case 2: {
        if (tag == 16) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.DisconnectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.DisconnectReq)
  return false;
#undef DO_
}

void DisconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.DisconnectReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.DisconnectReq.clientUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientuuid(), output);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientid(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.DisconnectReq)
}

::google::protobuf::uint8* DisconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.DisconnectReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.DisconnectReq.clientUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientuuid(), target);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clientid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.DisconnectReq)
  return target;
}

int DisconnectReq::ByteSize() const {
  int total_size = 0;

  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientuuid());
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DisconnectReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DisconnectReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisconnectReq::MergeFrom(const DisconnectReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.clientuuid().size() > 0) {

    clientuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuuid_);
  }
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
}

void DisconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectReq::CopyFrom(const DisconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectReq::IsInitialized() const {

  return true;
}

void DisconnectReq::Swap(DisconnectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisconnectReq::InternalSwap(DisconnectReq* other) {
  clientuuid_.Swap(&other->clientuuid_);
  std::swap(clientid_, other->clientid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisconnectReq_descriptor_;
  metadata.reflection = DisconnectReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisconnectReq

// optional string clientUUID = 1;
void DisconnectReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DisconnectReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.DisconnectReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisconnectReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.DisconnectReq.clientUUID)
}
 void DisconnectReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.DisconnectReq.clientUUID)
}
 void DisconnectReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.DisconnectReq.clientUUID)
}
 ::std::string* DisconnectReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.DisconnectReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DisconnectReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisconnectReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.DisconnectReq.clientUUID)
}

// optional int32 clientId = 2;
void DisconnectReq::clear_clientid() {
  clientid_ = 0;
}
 ::google::protobuf::int32 DisconnectReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.DisconnectReq.clientId)
  return clientid_;
}
 void DisconnectReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.DisconnectReq.clientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenDbReq::kClientUUIDFieldNumber;
const int OpenDbReq::kClientIdFieldNumber;
const int OpenDbReq::kDatabaseNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenDbReq::OpenDbReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.OpenDbReq)
}

void OpenDbReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OpenDbReq::OpenDbReq(const OpenDbReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.OpenDbReq)
}

void OpenDbReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
  databasename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OpenDbReq::~OpenDbReq() {
  // @@protoc_insertion_point(destructor:rasnet.service.OpenDbReq)
  SharedDtor();
}

void OpenDbReq::SharedDtor() {
  clientuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  databasename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OpenDbReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenDbReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenDbReq_descriptor_;
}

const OpenDbReq& OpenDbReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

OpenDbReq* OpenDbReq::default_instance_ = NULL;

OpenDbReq* OpenDbReq::New(::google::protobuf::Arena* arena) const {
  OpenDbReq* n = new OpenDbReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenDbReq::Clear() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
  databasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OpenDbReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.OpenDbReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientUUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientuuid().data(), this->clientuuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.OpenDbReq.clientUUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientId;
        break;
      }

      // optional int32 clientId = 2;
      case 2: {
        if (tag == 16) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_databaseName;
        break;
      }

      // optional string databaseName = 3;
      case 3: {
        if (tag == 26) {
         parse_databaseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_databasename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->databasename().data(), this->databasename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.OpenDbReq.databaseName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.OpenDbReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.OpenDbReq)
  return false;
#undef DO_
}

void OpenDbReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.OpenDbReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbReq.clientUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientuuid(), output);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientid(), output);
  }

  // optional string databaseName = 3;
  if (this->databasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->databasename().data(), this->databasename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbReq.databaseName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->databasename(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.OpenDbReq)
}

::google::protobuf::uint8* OpenDbReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.OpenDbReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbReq.clientUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientuuid(), target);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clientid(), target);
  }

  // optional string databaseName = 3;
  if (this->databasename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->databasename().data(), this->databasename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbReq.databaseName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->databasename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.OpenDbReq)
  return target;
}

int OpenDbReq::ByteSize() const {
  int total_size = 0;

  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientuuid());
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientid());
  }

  // optional string databaseName = 3;
  if (this->databasename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->databasename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenDbReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpenDbReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenDbReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenDbReq::MergeFrom(const OpenDbReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.clientuuid().size() > 0) {

    clientuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuuid_);
  }
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
  if (from.databasename().size() > 0) {

    databasename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.databasename_);
  }
}

void OpenDbReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDbReq::CopyFrom(const OpenDbReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDbReq::IsInitialized() const {

  return true;
}

void OpenDbReq::Swap(OpenDbReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenDbReq::InternalSwap(OpenDbReq* other) {
  clientuuid_.Swap(&other->clientuuid_);
  std::swap(clientid_, other->clientid_);
  databasename_.Swap(&other->databasename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenDbReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenDbReq_descriptor_;
  metadata.reflection = OpenDbReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenDbReq

// optional string clientUUID = 1;
void OpenDbReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenDbReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbReq.clientUUID)
}
 void OpenDbReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbReq.clientUUID)
}
 void OpenDbReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbReq.clientUUID)
}
 ::std::string* OpenDbReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenDbReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbReq.clientUUID)
}

// optional int32 clientId = 2;
void OpenDbReq::clear_clientid() {
  clientid_ = 0;
}
 ::google::protobuf::int32 OpenDbReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbReq.clientId)
  return clientid_;
}
 void OpenDbReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbReq.clientId)
}

// optional string databaseName = 3;
void OpenDbReq::clear_databasename() {
  databasename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenDbReq::databasename() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbReq.databaseName)
  return databasename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbReq::set_databasename(const ::std::string& value) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbReq.databaseName)
}
 void OpenDbReq::set_databasename(const char* value) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbReq.databaseName)
}
 void OpenDbReq::set_databasename(const char* value, size_t size) {
  
  databasename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbReq.databaseName)
}
 ::std::string* OpenDbReq::mutable_databasename() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbReq.databaseName)
  return databasename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenDbReq::release_databasename() {
  
  return databasename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbReq::set_allocated_databasename(::std::string* databasename) {
  if (databasename != NULL) {
    
  } else {
    
  }
  databasename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), databasename);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbReq.databaseName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenDbRepl::kDbSessionIdFieldNumber;
const int OpenDbRepl::kServerHostNameFieldNumber;
const int OpenDbRepl::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenDbRepl::OpenDbRepl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.OpenDbRepl)
}

void OpenDbRepl::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OpenDbRepl::OpenDbRepl(const OpenDbRepl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.OpenDbRepl)
}

void OpenDbRepl::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dbsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverhostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

OpenDbRepl::~OpenDbRepl() {
  // @@protoc_insertion_point(destructor:rasnet.service.OpenDbRepl)
  SharedDtor();
}

void OpenDbRepl::SharedDtor() {
  dbsessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverhostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OpenDbRepl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenDbRepl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenDbRepl_descriptor_;
}

const OpenDbRepl& OpenDbRepl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

OpenDbRepl* OpenDbRepl::default_instance_ = NULL;

OpenDbRepl* OpenDbRepl::New(::google::protobuf::Arena* arena) const {
  OpenDbRepl* n = new OpenDbRepl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenDbRepl::Clear() {
  dbsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverhostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

bool OpenDbRepl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.OpenDbRepl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbSessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbsessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbsessionid().data(), this->dbsessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.OpenDbRepl.dbSessionId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serverHostName;
        break;
      }

      // optional string serverHostName = 2;
      case 2: {
        if (tag == 18) {
         parse_serverHostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverhostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverhostname().data(), this->serverhostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.OpenDbRepl.serverHostName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.OpenDbRepl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.OpenDbRepl)
  return false;
#undef DO_
}

void OpenDbRepl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.OpenDbRepl)
  // optional string dbSessionId = 1;
  if (this->dbsessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbsessionid().data(), this->dbsessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbRepl.dbSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dbsessionid(), output);
  }

  // optional string serverHostName = 2;
  if (this->serverhostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverhostname().data(), this->serverhostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbRepl.serverHostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverhostname(), output);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.OpenDbRepl)
}

::google::protobuf::uint8* OpenDbRepl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.OpenDbRepl)
  // optional string dbSessionId = 1;
  if (this->dbsessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbsessionid().data(), this->dbsessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbRepl.dbSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbsessionid(), target);
  }

  // optional string serverHostName = 2;
  if (this->serverhostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverhostname().data(), this->serverhostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.OpenDbRepl.serverHostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverhostname(), target);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.OpenDbRepl)
  return target;
}

int OpenDbRepl::ByteSize() const {
  int total_size = 0;

  // optional string dbSessionId = 1;
  if (this->dbsessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbsessionid());
  }

  // optional string serverHostName = 2;
  if (this->serverhostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverhostname());
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenDbRepl::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpenDbRepl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenDbRepl>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenDbRepl::MergeFrom(const OpenDbRepl& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.dbsessionid().size() > 0) {

    dbsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbsessionid_);
  }
  if (from.serverhostname().size() > 0) {

    serverhostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverhostname_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void OpenDbRepl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDbRepl::CopyFrom(const OpenDbRepl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDbRepl::IsInitialized() const {

  return true;
}

void OpenDbRepl::Swap(OpenDbRepl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenDbRepl::InternalSwap(OpenDbRepl* other) {
  dbsessionid_.Swap(&other->dbsessionid_);
  serverhostname_.Swap(&other->serverhostname_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenDbRepl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenDbRepl_descriptor_;
  metadata.reflection = OpenDbRepl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenDbRepl

// optional string dbSessionId = 1;
void OpenDbRepl::clear_dbsessionid() {
  dbsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenDbRepl::dbsessionid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbRepl.dbSessionId)
  return dbsessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbRepl::set_dbsessionid(const ::std::string& value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbRepl.dbSessionId)
}
 void OpenDbRepl::set_dbsessionid(const char* value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbRepl.dbSessionId)
}
 void OpenDbRepl::set_dbsessionid(const char* value, size_t size) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbRepl.dbSessionId)
}
 ::std::string* OpenDbRepl::mutable_dbsessionid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbRepl.dbSessionId)
  return dbsessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenDbRepl::release_dbsessionid() {
  
  return dbsessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbRepl::set_allocated_dbsessionid(::std::string* dbsessionid) {
  if (dbsessionid != NULL) {
    
  } else {
    
  }
  dbsessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbsessionid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbRepl.dbSessionId)
}

// optional string serverHostName = 2;
void OpenDbRepl::clear_serverhostname() {
  serverhostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenDbRepl::serverhostname() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbRepl.serverHostName)
  return serverhostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbRepl::set_serverhostname(const ::std::string& value) {
  
  serverhostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbRepl.serverHostName)
}
 void OpenDbRepl::set_serverhostname(const char* value) {
  
  serverhostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.OpenDbRepl.serverHostName)
}
 void OpenDbRepl::set_serverhostname(const char* value, size_t size) {
  
  serverhostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.OpenDbRepl.serverHostName)
}
 ::std::string* OpenDbRepl::mutable_serverhostname() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.OpenDbRepl.serverHostName)
  return serverhostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenDbRepl::release_serverhostname() {
  
  return serverhostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenDbRepl::set_allocated_serverhostname(::std::string* serverhostname) {
  if (serverhostname != NULL) {
    
  } else {
    
  }
  serverhostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverhostname);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.OpenDbRepl.serverHostName)
}

// optional uint32 port = 3;
void OpenDbRepl::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 OpenDbRepl::port() const {
  // @@protoc_insertion_point(field_get:rasnet.service.OpenDbRepl.port)
  return port_;
}
 void OpenDbRepl::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.OpenDbRepl.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseDbReq::kClientUUIDFieldNumber;
const int CloseDbReq::kClientIdFieldNumber;
const int CloseDbReq::kDbSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseDbReq::CloseDbReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.CloseDbReq)
}

void CloseDbReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloseDbReq::CloseDbReq(const CloseDbReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.CloseDbReq)
}

void CloseDbReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
  dbsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloseDbReq::~CloseDbReq() {
  // @@protoc_insertion_point(destructor:rasnet.service.CloseDbReq)
  SharedDtor();
}

void CloseDbReq::SharedDtor() {
  clientuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbsessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CloseDbReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseDbReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseDbReq_descriptor_;
}

const CloseDbReq& CloseDbReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

CloseDbReq* CloseDbReq::default_instance_ = NULL;

CloseDbReq* CloseDbReq::New(::google::protobuf::Arena* arena) const {
  CloseDbReq* n = new CloseDbReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseDbReq::Clear() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
  dbsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloseDbReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.CloseDbReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientUUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientuuid().data(), this->clientuuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.CloseDbReq.clientUUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientId;
        break;
      }

      // optional int32 clientId = 2;
      case 2: {
        if (tag == 16) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dbSessionId;
        break;
      }

      // optional string dbSessionId = 3;
      case 3: {
        if (tag == 26) {
         parse_dbSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbsessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dbsessionid().data(), this->dbsessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.CloseDbReq.dbSessionId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.CloseDbReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.CloseDbReq)
  return false;
#undef DO_
}

void CloseDbReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.CloseDbReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.CloseDbReq.clientUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientuuid(), output);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientid(), output);
  }

  // optional string dbSessionId = 3;
  if (this->dbsessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbsessionid().data(), this->dbsessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.CloseDbReq.dbSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dbsessionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.CloseDbReq)
}

::google::protobuf::uint8* CloseDbReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.CloseDbReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.CloseDbReq.clientUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientuuid(), target);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clientid(), target);
  }

  // optional string dbSessionId = 3;
  if (this->dbsessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dbsessionid().data(), this->dbsessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.CloseDbReq.dbSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbsessionid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.CloseDbReq)
  return target;
}

int CloseDbReq::ByteSize() const {
  int total_size = 0;

  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientuuid());
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientid());
  }

  // optional string dbSessionId = 3;
  if (this->dbsessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dbsessionid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseDbReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CloseDbReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseDbReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseDbReq::MergeFrom(const CloseDbReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.clientuuid().size() > 0) {

    clientuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuuid_);
  }
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
  if (from.dbsessionid().size() > 0) {

    dbsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dbsessionid_);
  }
}

void CloseDbReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDbReq::CopyFrom(const CloseDbReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDbReq::IsInitialized() const {

  return true;
}

void CloseDbReq::Swap(CloseDbReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseDbReq::InternalSwap(CloseDbReq* other) {
  clientuuid_.Swap(&other->clientuuid_);
  std::swap(clientid_, other->clientid_);
  dbsessionid_.Swap(&other->dbsessionid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseDbReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseDbReq_descriptor_;
  metadata.reflection = CloseDbReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseDbReq

// optional string clientUUID = 1;
void CloseDbReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloseDbReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.CloseDbReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseDbReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.CloseDbReq.clientUUID)
}
 void CloseDbReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.CloseDbReq.clientUUID)
}
 void CloseDbReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.CloseDbReq.clientUUID)
}
 ::std::string* CloseDbReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.CloseDbReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloseDbReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseDbReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.CloseDbReq.clientUUID)
}

// optional int32 clientId = 2;
void CloseDbReq::clear_clientid() {
  clientid_ = 0;
}
 ::google::protobuf::int32 CloseDbReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.CloseDbReq.clientId)
  return clientid_;
}
 void CloseDbReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.CloseDbReq.clientId)
}

// optional string dbSessionId = 3;
void CloseDbReq::clear_dbsessionid() {
  dbsessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloseDbReq::dbsessionid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.CloseDbReq.dbSessionId)
  return dbsessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseDbReq::set_dbsessionid(const ::std::string& value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.CloseDbReq.dbSessionId)
}
 void CloseDbReq::set_dbsessionid(const char* value) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.CloseDbReq.dbSessionId)
}
 void CloseDbReq::set_dbsessionid(const char* value, size_t size) {
  
  dbsessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.CloseDbReq.dbSessionId)
}
 ::std::string* CloseDbReq::mutable_dbsessionid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.CloseDbReq.dbSessionId)
  return dbsessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloseDbReq::release_dbsessionid() {
  
  return dbsessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseDbReq::set_allocated_dbsessionid(::std::string* dbsessionid) {
  if (dbsessionid != NULL) {
    
  } else {
    
  }
  dbsessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbsessionid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.CloseDbReq.dbSessionId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAliveReq::kClientUUIDFieldNumber;
const int KeepAliveReq::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAliveReq::KeepAliveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rasnet.service.KeepAliveReq)
}

void KeepAliveReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeepAliveReq::KeepAliveReq(const KeepAliveReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rasnet.service.KeepAliveReq)
}

void KeepAliveReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
}

KeepAliveReq::~KeepAliveReq() {
  // @@protoc_insertion_point(destructor:rasnet.service.KeepAliveReq)
  SharedDtor();
}

void KeepAliveReq::SharedDtor() {
  clientuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeepAliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAliveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepAliveReq_descriptor_;
}

const KeepAliveReq& KeepAliveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rasmgr_5fclient_5fservice_2eproto();
  return *default_instance_;
}

KeepAliveReq* KeepAliveReq::default_instance_ = NULL;

KeepAliveReq* KeepAliveReq::New(::google::protobuf::Arena* arena) const {
  KeepAliveReq* n = new KeepAliveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepAliveReq::Clear() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
}

bool KeepAliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rasnet.service.KeepAliveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientUUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientuuid().data(), this->clientuuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rasnet.service.KeepAliveReq.clientUUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clientId;
        break;
      }

      // optional int32 clientId = 2;
      case 2: {
        if (tag == 16) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rasnet.service.KeepAliveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rasnet.service.KeepAliveReq)
  return false;
#undef DO_
}

void KeepAliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rasnet.service.KeepAliveReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.KeepAliveReq.clientUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientuuid(), output);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clientid(), output);
  }

  // @@protoc_insertion_point(serialize_end:rasnet.service.KeepAliveReq)
}

::google::protobuf::uint8* KeepAliveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rasnet.service.KeepAliveReq)
  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientuuid().data(), this->clientuuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rasnet.service.KeepAliveReq.clientUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientuuid(), target);
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clientid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rasnet.service.KeepAliveReq)
  return target;
}

int KeepAliveReq::ByteSize() const {
  int total_size = 0;

  // optional string clientUUID = 1;
  if (this->clientuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientuuid());
  }

  // optional int32 clientId = 2;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAliveReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeepAliveReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAliveReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepAliveReq::MergeFrom(const KeepAliveReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.clientuuid().size() > 0) {

    clientuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuuid_);
  }
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
}

void KeepAliveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveReq::CopyFrom(const KeepAliveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveReq::IsInitialized() const {

  return true;
}

void KeepAliveReq::Swap(KeepAliveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAliveReq::InternalSwap(KeepAliveReq* other) {
  clientuuid_.Swap(&other->clientuuid_);
  std::swap(clientid_, other->clientid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepAliveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepAliveReq_descriptor_;
  metadata.reflection = KeepAliveReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepAliveReq

// optional string clientUUID = 1;
void KeepAliveReq::clear_clientuuid() {
  clientuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeepAliveReq::clientuuid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.KeepAliveReq.clientUUID)
  return clientuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveReq::set_clientuuid(const ::std::string& value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rasnet.service.KeepAliveReq.clientUUID)
}
 void KeepAliveReq::set_clientuuid(const char* value) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rasnet.service.KeepAliveReq.clientUUID)
}
 void KeepAliveReq::set_clientuuid(const char* value, size_t size) {
  
  clientuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rasnet.service.KeepAliveReq.clientUUID)
}
 ::std::string* KeepAliveReq::mutable_clientuuid() {
  
  // @@protoc_insertion_point(field_mutable:rasnet.service.KeepAliveReq.clientUUID)
  return clientuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeepAliveReq::release_clientuuid() {
  
  return clientuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeepAliveReq::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid != NULL) {
    
  } else {
    
  }
  clientuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientuuid);
  // @@protoc_insertion_point(field_set_allocated:rasnet.service.KeepAliveReq.clientUUID)
}

// optional int32 clientId = 2;
void KeepAliveReq::clear_clientid() {
  clientid_ = 0;
}
 ::google::protobuf::int32 KeepAliveReq::clientid() const {
  // @@protoc_insertion_point(field_get:rasnet.service.KeepAliveReq.clientId)
  return clientid_;
}
 void KeepAliveReq::set_clientid(::google::protobuf::int32 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:rasnet.service.KeepAliveReq.clientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace rasnet

// @@protoc_insertion_point(global_scope)
